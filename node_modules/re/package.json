{
  "name": "re",
  "description": "Do it again, after a bit.",
  "version": "0.1.1-2",
  "main": "./lib/re",
  "keywords": [
    "utility",
    "retry",
    "exponential backoff",
    "linear backoff"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/waylonflinn/re.git"
  },
  "bugs": "https://trello.com/board/re/50b7a89a42b74706180016d2",
  "author": {
    "name": "Waylon Flinn",
    "email": "waylonflinn@gmail.com"
  },
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# Re\n\nDo it again, if it doesn't work the first time. Supports various configurable\nretry strategies, including: constant, exponential backoff and linear backoff.\n\nFunctions are styled to match the simplicity and ease of use found in the [async](https://github.com/caolan/async)\n library.\n\n## Install\n\n    npm install re\n\n\n## Quick Example\n\n    var Re = require('re'),\n        re = new Re();\n\n    re.try(repeatMe, doMeAtTheEnd);\n\n    var repeatMe = function(retryCount, done){\n      if(retryCount < 2) done(new Error(\"Not there yet!\"));\n      else done(null, retryCount);\n    };\n\n    var doMeAtTheEnd = function(err, retryCount){\n      console.log(\"It took this many tries: \" + retryCount);\n    };\n\n## In the Browser\nTested in recent versions of Internet Explorer, Firefox and Chrome. Usage:\n\n    <script type=\"text/javascript\" src=\"re.js\"></script>\n    <script type=\"text/javascript\">\n      var re = new Re();\n\n      re.try(repeatMe, doMeAtTheEnd);\n      \n      // repeatMe and doMeAtTheEnd are exactly as above\n\n    </script>\n\nTry it in your browser with this test: [test/test.html](http://htmlpreview.github.com/?https://github.com/waylonflinn/re/blob/master/test/test.html) or play with the test in this fiddle: [re-fiddle](http://jsfiddle.net/7C26s/1/embedded/result/) (these pages don't work in IE, because it's recently gone from lax to pedantic).\n\n## Usage\n\nIf you like the defaults, call it like this:\n\n    var Re = require('re'),\n        re = new Re();\n\n    re.try(function(retryCount, done){\n        if(retryCount < 2) done(new Error(\"Not there yet!\"));\n        else done(null, retryCount);\n      },\n      function(err, retryCount){\n        console.log(\"It took this many retries: \" + retryCount);\n    });\n\n\nThe `re.try` function takes two arguments, a function to call until it works\n(or we run out of retries) and a function to call when it finally succeeds (or\nwe fail too many times).\nAs the name suggests we automatically wrap your function in a standard `try`\nblock and, if an exception occurs, call it again according to the retry schedule.\n\nThis first function passed to `re.try` should take 2 arguments like this:\n\n    function operation(retryCount, done)\n\nThe `retryCount` argument is the number of the current retry. It'll be zero the first time \nand get bigger every time.\n\nThe `done` argument is a function to call when you've completed your operation.\nIf you encounter an error condition, pass in the `err` object\nas the first argument. If you don't encounter an error, pass in a falsy first\nargument (null works). If you give us a falsy error and no exception happens,\nwe call your callback with all the arguments passed into this function.\n\nThe second function passed to `re.try` can take as many arguments as you like but\nshould always start with an error parameter. This will be falsy, if no error happens.\n\nThe `re.do` function is like `re.try` expect it doesn't wrap your operation in\na `try...catch`.\n\n## Options\n\nThe default options look like this:\n\n    var options = {\n        retries : 10,\n        strategy : {\n          \"type\": Re.STRATEGIES.EXPONENTIAL,\n          \"initial\":100,\n          \"base\":2\n        }\n    }\n\nYou pass this options object into the `Re` constructor.\n\n    var Re = require('re'),\n        re = new Re(options);\n\nThis gives you 10 retries and an exponential backoff strategy with the following progression (in milliseconds): 100, 200,\n400, 800, 1600, 3200, 6400, 12800, 25600, 51200\n\n### Retry Strategy Examples\n\nThe following will retry every 400 milliseconds:\n\n    {\"type\": Re.STRATEGIES.CONSTANT, \"initial\": 400}\n\nThe following will give a linear backoff strategy that has the following progression (when paired with `retries: 10`) : 200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 1800\n\n    {\"type\": Re.STRATEGIES.LINEAR, \"initial\": 200, \"max\":1800}\n\nBoth progressive strategies accept the `max` option.  All strategies also accept a\n`rand` option. This is a `Boolean` that adds a random multiplier between 1 and 2.\nThis makes them act like the tradition backoff function. This option is set to `false` by default.\n\n## Stability\n\nTest coverage is good and expanding. We use [mocha](http://visionmedia.github.com/mocha/). \n\n## Technical Details\n\nThe traditional exponential backoff function is described here:\n[Exponential Backoff in Distributed Systems](http://dthain.blogspot.com/2009/02/exponential-backoff-in-distributed.html).\nThis is equivalent to our exponential backoff function with the `rand` option set to `true`.\n\nOur formula for exponential backoff looks something like this, when using all the options:\n\n    return Math.min(random * initial * Math.pow(base, retry), max);\n\nWhere `random` is a random number in the half-open interval [1, 2). When randomness is turned off,\nthe value of this variable is always 1.\n\nIf you don't specify the `max` option, the formula looks like this:\n\n    return random * initial * Math.pow(base, retry);\n\n\nI'm shamelessly stealing the following link from [node-retry](https://github.com/tim-kos/node-retry)\njust because it's fun for nerdy math people to play with.\nYou can use it to calculate the exact value you need for the `base` option so that all\nretry intervals sum to a desired amount: [Wolfram Alpha](http://www.wolframalpha.com/input/?i=Sum%5B100*x%5Ek%2C+%7Bk%2C+0%2C+9%7D%5D+%3D+30+*+1000).\n",
  "readmeFilename": "README.md",
  "_id": "re@0.1.1-2",
  "dist": {
    "shasum": "a399f2a3572619496fc53f4fdd9226ef2d1d8a81"
  },
  "_from": "re@~0.1.1-2",
  "_resolved": "https://registry.npmjs.org/re/-/re-0.1.1-2.tgz"
}
